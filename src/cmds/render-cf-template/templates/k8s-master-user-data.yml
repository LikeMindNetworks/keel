#cloud-config

# write files
# 1) wait for etcd
# 2) wait for internet
write_files:
- path: /opt/bin/waiter.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://127.0.0.1:2379/v2/machines; do sleep 2; done
- path: /opt/bin/network-waiter.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl www.google.com; do sleep 2; done

coreos:
  etcd2:
    name: master
    initial-cluster-token: k8s_etcd
    initial-cluster: master=http://$private_ipv4:2380
    listen-peer-urls: http://$private_ipv4:2380, http://localhost:2380
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://$private_ipv4:2379, http://localhost:2379
    advertise-client-urls: http://$private_ipv4:2379

  fleet:
    etcd_servers: http://localhost:2379
    metadata: k8srole=master

  flannel:
    etcd_endpoints: http://localhost:2379

  locksmithd:
    endpoint: http://localhost:2379

  units:
    - name: network-waiter.service
      command: start
      content: |
        [Unit]
        Description=network waiter
        Wants=network-online.target
        After=network-online.target
        Before=download-bin.service
        #
        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/network-waiter.sh
        ExecStart=/usr/bin/bash /opt/bin/network-waiter.sh
        RemainAfterExit=yes
        Type=oneshot

    - name: download-bin.service
      command: start
      content: |
        [Unit]
        Description=Download required binaries
        Requires=network-waiter.service
        After=network-waiter.service
        #
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        #
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v${ K8S_VERSION }/bin/linux/amd64/kubectl
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v${ K8S_VERSION }/bin/linux/amd64/kube-apiserver
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v${ K8S_VERSION }/bin/linux/amd64/kube-controller-manager
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v${ K8S_VERSION }/bin/linux/amd64/kube-scheduler
        ExecStartPre=/usr/bin/wget -nc -O /opt/bin/kube-register https://github.com/kelseyhightower/kube-register/releases/download/v${ KUBE_REG_VERSION }/kube-register-${ KUBE_REG_VERSION }-linux-amd64
        #
        ExecStart=/usr/bin/chmod +x -R /opt/bin/
        RemainAfterExit=yes
        Type=oneshot

    - name: etcd2.service
      command: start

    - name: fleet.service
      command: start

    - name: etcd2-waiter.service
      command: start
      content: |
        [Unit]
        Description=etcd waiter
        Wants=network-online.target
        Wants=etcd2.service
        Requires=download-bin.service
        After=download-bin.service
        After=etcd2.service
        After=network-online.target
        Before=flanneld.service fleet.service locksmithd.service
        #
        [Service]
        ExecStart=/usr/bin/bash /opt/bin/waiter.sh
        RemainAfterExit=true
        Type=oneshot

    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            ExecStartPre=-/usr/bin/etcdctl mk \
              /coreos.com/network/config \
              '{"Network": "10.244.0.0/16", "Backend": {"Type": "vxlan"}}'

    - name: docker-cache.service
      command: start
      content: |
        [Unit]
        Description=Docker cache proxy
        Requires=early-docker.service
        After=early-docker.service
        Before=early-docker.target
        #
        [Service]
        Restart=always
        TimeoutStartSec=0
        RestartSec=5
        Environment=TMPDIR=/var/tmp/
        Environment=DOCKER_HOST=unix:///var/run/early-docker.sock
        ExecStartPre=-/usr/bin/docker kill docker-registry
        ExecStartPre=-/usr/bin/docker rm docker-registry
        ExecStartPre=/usr/bin/docker pull quay.io/devops/docker-registry:latest
        #
        # GUNICORN_OPTS is an workaround for
        # https://github.com/docker/docker-registry/issues/892
        #
        ExecStart=/usr/bin/docker run --rm --net host --name docker-registry \
          -e STANDALONE=false \
          -e GUNICORN_OPTS=[--preload] \
          -e MIRROR_SOURCE=https://registry-1.docker.io \
          -e MIRROR_SOURCE_INDEX=https://index.docker.io \
          -e MIRROR_TAGS_CACHE_TTL=1800 \
          quay.io/devops/docker-registry:latest

    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=etcd2-waiter.service
        After=etcd2-waiter.service
        #
        [Service]
        ExecStart=/opt/bin/kube-apiserver \
          --insecure-bind-address=0.0.0.0 \
          --insecure-port=${ K8S_PORT } \
          --service-cluster-ip-range=10.100.0.0/16 \
          --etcd-servers=http://localhost:2379
        Restart=always
        RestartSec=10

    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        #
        [Service]
        ExecStart=/opt/bin/kube-controller-manager \
          --master=127.0.0.1:${ K8S_PORT }
        Restart=always
        RestartSec=10

    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        #
        [Service]
        ExecStart=/opt/bin/kube-scheduler \
          --master=127.0.0.1:${ K8S_PORT }
        Restart=always
        RestartSec=10

    - name: kube-register.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Registration Service
        Documentation=https://github.com/kelseyhightower/kube-register
        Requires=kube-apiserver.service fleet.service
        After=kube-apiserver.service fleet.service
        #
        [Service]
        ExecStart=/opt/bin/kube-register \
          --metadata=k8srole=node \
          --fleet-endpoint=unix:///var/run/fleet.sock \
          --api-endpoint=http://127.0.0.1:${ K8S_PORT }
        Restart=always
        RestartSec=10

  update:
    group: alpha
    reboot-strategy: off
